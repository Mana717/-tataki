let score = 0;
let timeLeft = 30;
let level = 1;
let gameActive = false;
let gamePaused = false;
let gameTimer;
let moleTimer;
let highScore = 0; // localStorageはコードペンで使えない場合があるため

// DOM要素の取得
const scoreElement = document.getElementById('score');
const timeElement = document.getElementById('time');
const levelElement = document.getElementById('level');
const gameOverElement = document.getElementById('gameOver');
const finalScoreElement = document.getElementById('finalScore');
const finalLevelElement = document.getElementById('finalLevel');
const highScoreElement = document.getElementById('highScore');
const startBtn = document.getElementById('startBtn');
const pauseBtn = document.getElementById('pauseBtn');
const holes = document.querySelectorAll('.hole');

// 初期化
updateDisplay();
highScoreElement.textContent = highScore;

function startGame() {
    if (gamePaused) {
        // 一時停止から復帰
        gamePaused = false;
        startBtn.textContent = 'ゲーム開始';
        pauseBtn.disabled = false;
        startMoleTimer();
        startGameTimer();
    } else {
        // 新しいゲーム開始
        score = 0;
        timeLeft = 30;
        level = 1;
        gameActive = true;
        gamePaused = false;
        
        gameOverElement.style.display = 'none';
        startBtn.textContent = 'ゲーム開始';
        startBtn.disabled = true;
        pauseBtn.disabled = false;
        
        clearAllMoles();
        updateDisplay();
        startMoleTimer();
        startGameTimer();
    }
}

function pauseGame() {
    if (!gameActive) return;
    
    gamePaused = true;
    clearTimeout(gameTimer);
    clearTimeout(moleTimer);
    
    startBtn.textContent = '再開';
    startBtn.disabled = false;
    pauseBtn.disabled = true;
    
    clearAllMoles();
}

function resetGame() {
    gameActive = false;
    gamePaused = false;
    score = 0;
    timeLeft = 30;
    level = 1;
    
    clearTimeout(gameTimer);
    clearTimeout(moleTimer);
    clearAllMoles();
    
    gameOverElement.style.display = 'none';
    startBtn.textContent = 'ゲーム開始';
    startBtn.disabled = false;
    pauseBtn.disabled = true;
    
    updateDisplay();
}

function startGameTimer() {
    gameTimer = setTimeout(() => {
        timeLeft--;
        timeElement.textContent = timeLeft;
        
        if (timeLeft <= 0) {
            endGame();
        } else {
            // レベルアップ判定
            if (score >= level * 10) {
                level++;
                levelElement.textContent = level;
            }
            startGameTimer();
        }
    }, 1000);
}

function startMoleTimer() {
    if (!gameActive || gamePaused) return;
    
    const delay = Math.max(800 - (level - 1) * 100, 300); // レベルが上がるほど早く
    
    moleTimer = setTimeout(() => {
        showRandomMole();
        startMoleTimer();
    }, delay);
}

function showRandomMole() {
    // 既にもぐらがいる穴を除外
    const emptyHoles = Array.from(holes).filter(hole => !hole.querySelector('.mole'));
    if (emptyHoles.length === 0) return;
    
    const randomHole = emptyHoles[Math.floor(Math.random() * emptyHoles.length)];
    const mole = document.createElement('div');
    mole.className = 'mole';
    randomHole.appendChild(mole);
    
    // もぐらが自動で消える
    setTimeout(() => {
        if (mole && mole.parentNode) {
            mole.remove();
        }
    }, 1500 - level * 100); // レベルが上がるほど早く消える
}

function hitMole(hole) {
    if (!gameActive || gamePaused) return;
    
    const mole = hole.querySelector('.mole');
    if (mole) {
        // ヒット効果
        mole.classList.add('hit');
        score += level; // レベルに応じて得点
        scoreElement.textContent = score;
        
        // もぐらを削除
        setTimeout(() => {
            mole.remove();
        }, 300);
    }
}

function clearAllMoles() {
    holes.forEach(hole => {
        const mole = hole.querySelector('.mole');
        if (mole) {
            mole.remove();
        }
    });
}

function endGame() {
    gameActive = false;
    gamePaused = false;
    clearTimeout(gameTimer);
    clearTimeout(moleTimer);
    clearAllMoles();
    
    // ハイスコア更新
    if (score > highScore) {
        highScore = score;
        highScoreElement.textContent = highScore;
    }
    
    // ゲーム終了表示
    finalScoreElement.textContent = score;
    finalLevelElement.textContent = level;
    gameOverElement.style.display = 'block';
    
    startBtn.textContent = 'もう一度';
    startBtn.disabled = false;
    pauseBtn.disabled = true;
}

function updateDisplay() {
    scoreElement.textContent = score;
    timeElement.textContent = timeLeft;
    levelElement.textContent = level;
    highScoreElement.textContent = highScore;
}
    margin-bottom: 20px;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
}

.game-info {
    display: flex;
    justify-content: space-between;
    margin-bottom: 30px;
    font-size: 1.2rem;
    font-weight: bold;
}

.score, .time, .level {
    background: #fd79a8;
    color: white;
    padding: 10px 20px;
    border-radius: 25px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}

.game-board {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 15px;
    margin-bottom: 30px;
    background: #00b894;
    padding: 20px;
    border-radius: 15px;
    box-shadow: inset 0 4px 8px rgba(0, 0, 0, 0.2);
}

.hole {
    width: 100px;
    height: 100px;
    background: #2d3436;
    border-radius: 50%;
    position: relative;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: inset 0 4px 8px rgba(0, 0, 0, 0.5);
}

.hole:hover {
    transform: scale(1.05);
}

.mole {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 80px;
    height: 80px;
    background: #8b4513;
    border-radius: 50%;
    cursor: pointer;
    animation: pop-up 0.3s ease-out;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
    display: flex;
    align-items: center;
    justify-content: center;
}

/* もぐらの顔をCSS図形で作成 */
.mole::before {
    content: '';
    position: absolute;
    width: 60px;
    height: 60px;
    background: #654321;
    border-radius: 50%;
    border: 3px solid #8b4513;
}

/* もぐらの目と鼻をCSS図形で作成 */
.mole::after {
    content: '';
    position: absolute;
    width: 8px;
    height: 8px;
    background: #000;
    border-radius: 50%;
    top: 22px;
    left: 20px;
    box-shadow: 20px 0 0 #000, 10px 10px 0 #000;
}

/* ハンマーアイコン */
.hammer-icon {
    display: inline-block;
    width: 24px;
    height: 24px;
    background: #8b4513;
    border-radius: 4px;
    position: relative;
    margin: 0 8px;
}

.hammer-icon::before {
    content: '';
    position: absolute;
    width: 4px;
    height: 20px;
    background: #654321;
    bottom: -20px;
    left: 50%;
    transform: translateX(-50%);
}

.mole.hit {
    animation: hit 0.3s ease-out;
}

@keyframes pop-up {
    0% {
        transform: translate(-50%, -50%) scale(0);
    }
    100% {
        transform: translate(-50%, -50%) scale(1);
    }
}

@keyframes hit {
    0% {
        transform: translate(-50%, -50%) scale(1);
    }
    50% {
        transform: translate(-50%, -50%) scale(1.2);
    }
    100% {
        transform: translate(-50%, -50%) scale(0);
    }
}

.control-buttons {
    display: flex;
    gap: 15px;
    justify-content: center;
    flex-wrap: wrap;
}

.btn {
    background: #00b894;
    color: white;
    border: none;
    padding: 15px 30px;
    font-size: 1.1rem;
    font-weight: bold;
    border-radius: 25px;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}

.btn:hover {
    background: #00a085;
    transform: translateY(-2px);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);
}

.btn:active {
    transform: translateY(0);
}

.btn:disabled {
    background: #74b9ff;
    cursor: not-allowed;
    transform: none;
}

.game-over {
    background: rgba(231, 76, 60, 0.9);
    color: white;
    padding: 20px;
    border-radius: 15px;
    margin-bottom: 20px;
    display: none;
}

.game-over h2 {
    margin-bottom: 10px;
    font-size: 2rem;
}

.high-score {
    color: #f39c12;
    font-weight: bold;
    margin-top: 15px;
}

@media (max-width: 480px) {
    .game-container {
        padding: 20px;
    }
    
    .game-title {
        font-size: 2rem;
    }
    
    .game-info {
        flex-direction: column;
        gap: 10px;
    }
    
    .hole {
        width: 80px;
        height: 80px;
    }
    
    .mole {
        width: 60px;
        height: 60px;
    }
    
    .mole::before {
        width: 45px;
        height: 45px;
    }
    
    .mole::after {
        width: 6px;
        height: 6px;
        top: 17px;
        left: 15px;
        box-shadow: 15px 0 0 #000, 8px 8px 0 #000;
    }
}
